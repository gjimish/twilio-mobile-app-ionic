{"version":3,"sources":["components/Login/LoginCard.js","assets/logo.png","pages/LoginPage.js","actions/callActions.js"],"names":["LoginCard","props","isLoading","showSync","isContactsSyncing","isLeadsSyncing","isMessagesSyncing","onDoAuth","style","fontSize","expand","size","onClick","icon","logInOutline","slot","textAlign","lines","color","checkmarkCircleOutline","paddingTop","connect","state","isAuthenticated","auth","error","dispatch","login","data","clearErrors","fetchAccessToken","setBasePath","setAuthToken","axios","get","headers","then","res","undefined","status","type","LOGOUT_SUCCESS","FETCH_ACCESS_TOKEN","payload","catch","newLogin","history","useHistory","auth_token","useParams","useState","modal","email","password","msg","loading","contactsSync","leadsSync","messagesSync","setState","useEffect","id","Base64","decode","split","newUser","userAlreadyExists","push","channel","Pusher","environment","PUSHER_ID","cluster","subscribe","bind","console","log","tempLoginData","JSON","parse","localStorage","getItem","height","justifyContent","alignItems","src","logo","alt","width","sizeLg","Capacitor","isNative","browser","InAppBrowser","create","MOBILE_LOGIN_URL","on","event","url","indexOf","substring","lastIndexOf","close","ZOHO_LOGIN_REDIRECT_URI","window","open","isOpen","onDidDismiss","header","message","buttons","text","handler"],"mappings":"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","file":"static/js/41.5ce7db66.chunk.js","sourcesContent":["import {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonCardTitle,\n  IonIcon,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonSpinner\n} from '@ionic/react';\nimport { checkmarkCircleOutline, logInOutline } from 'ionicons/icons';\n\nconst LoginCard = (props) => {\n  const {\n    isLoading,\n    showSync,\n    isContactsSyncing,\n    isLeadsSyncing,\n    isMessagesSyncing,\n    onDoAuth\n  } = props;\n\n  return (\n    <IonCard>\n      <IonCardHeader>\n        <IonCardTitle>{isLoading ? 'Logging in...' : 'Login'}</IonCardTitle>\n      </IonCardHeader>\n      <IonCardContent>\n        {isLoading ? (\n          <>\n            {' '}\n            <p style={{ fontSize: '16px' }}>\n              Syncing Zoho account data. Please do not refresh or leave this\n              page.\n            </p>\n          </>\n        ) : (\n          <div>\n            <IonButton expand=\"block\" size=\"large\" onClick={onDoAuth}>\n              Login\n              <IonIcon icon={logInOutline} slot=\"end\" />\n            </IonButton>\n            <p\n              style={{\n                textAlign: 'center'\n              }}>\n              Login with your Zoho CRM account\n            </p>\n          </div>\n        )}\n        {showSync && (\n          <>\n            <IonList lines=\"inset\">\n              <IonItem>\n                <IonLabel>Syncing Contacts</IonLabel>\n                {isContactsSyncing ? (\n                  <IonSpinner color=\"primary\" />\n                ) : (\n                  <IonIcon color=\"primary\" icon={checkmarkCircleOutline} />\n                )}\n              </IonItem>\n              <IonItem>\n                <IonLabel>Syncing Leads</IonLabel>\n                {isLeadsSyncing ? (\n                  <IonSpinner color=\"primary\" />\n                ) : (\n                  <IonIcon color=\"primary\" icon={checkmarkCircleOutline} />\n                )}\n              </IonItem>\n              <IonItem>\n                <IonLabel>Syncing Messages</IonLabel>\n                {isMessagesSyncing ? (\n                  <IonSpinner color=\"primary\" />\n                ) : (\n                  <IonIcon color=\"primary\" icon={checkmarkCircleOutline} />\n                )}\n              </IonItem>\n            </IonList>\n          </>\n        )}\n        <div\n          style={{\n            paddingTop: '20px',\n            textAlign: 'center'\n          }}>\n          {isLoading && <IonSpinner color=\"primary\" />}\n        </div>\n      </IonCardContent>\n    </IonCard>\n  );\n};\n\nexport default LoginCard;\n","export default __webpack_public_path__ + \"static/media/logo.ab037da5.png\";","import React, { useState, useEffect } from 'react';\nimport { login, newLogin } from '../actions/authActions';\nimport { clearErrors } from '../actions/errorActions';\nimport { fetchAccessToken } from '../actions/callActions';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Base64 } from 'js-base64';\nimport Pusher from 'pusher-js';\n// Capacitor Dependencies\nimport { Capacitor } from '@capacitor/core';\nimport { InAppBrowser } from '@ionic-native/in-app-browser';\n// Environment\nimport { environment } from '../environments/environment';\nimport {\n  IonAlert,\n  IonCol,\n  IonContent,\n  IonGrid,\n  IonPage,\n  IonRow\n} from '@ionic/react';\nimport LoginCard from '../components/Login/LoginCard';\nimport logo from '../assets/logo.png';\n\nfunction LoginPage({\n  isAuthenticated,\n  showSync,\n  error,\n  login,\n  fetchAccessToken,\n  newLogin\n}) {\n  let history = useHistory();\n  let { auth_token } = useParams();\n  const [state, setState] = useState({\n    modal: false,\n    email: '',\n    password: '',\n    msg: null,\n    loading: false,\n    contactsSync: true,\n    leadsSync: null,\n    messagesSync: null\n  });\n\n  useEffect(() => {\n    // Check for Login error\n    if (error.id === 'LOGIN_FAIL') {\n      setState((state) => ({\n        ...state,\n        msg: error.msg.error,\n        loading: false\n      }));\n    } else {\n      setState((state) => ({\n        ...state,\n        msg: null,\n        loading: false\n      }));\n    }\n  }, [error]);\n\n  useEffect(() => {\n    // Check for Login error\n    if (auth_token !== '' && auth_token !== undefined) {\n      let token = Base64.decode(auth_token);\n\n      let data = token.split('|');\n\n      if (data[0] !== '' && data[0] !== undefined) {\n        setState((state) => ({\n          ...state,\n          loading: true\n        }));\n        const newUser = {\n          email: data[0],\n          password: data[1],\n          userAlreadyExists: data[2]\n        };\n\n        login(newUser);\n      }\n    }\n  }, [auth_token, login]);\n\n  useEffect(() => {\n    // If authenticated, close modal\n    if (isAuthenticated) {\n      setState((state) => ({\n        ...state,\n        msg: null,\n        loading: false\n      }));\n      history.push('/Dashboard');\n      fetchAccessToken();\n    }\n  }, [history, fetchAccessToken, isAuthenticated]);\n\n  useEffect(() => {\n    const pusher = new Pusher(environment.PUSHER_ID, {\n      cluster: 'us2'\n    });\n    const channel = pusher.subscribe('incomming-channel');\n    channel.bind('login-event', (data) => {\n      if (data.type === 'login') {\n        console.log('Logged In successfull after syncing data');\n        let tempLoginData = JSON.parse(localStorage.getItem('tempLoginData'));\n        console.log(tempLoginData);\n        newLogin(tempLoginData);\n      }\n    });\n\n    channel.bind('syncing-event', (data) => {\n      if (data.type === 'Contacts') {\n        setState((state) => ({\n          ...state,\n          contactsSync: false,\n          leadsSync: true\n        }));\n      } else if (data.type === 'Leads') {\n        setState((state) => ({\n          ...state,\n          leadsSync: false,\n          messagesSync: true\n        }));\n      } else if (data.type === 'twiliosmsextension0__Sent_SMS') {\n        setState((state) => ({\n          ...state,\n          messagesSync: false\n        }));\n      }\n    });\n  }, [newLogin]);\n\n  // This function is used to do authenticate\n  function onDoAuth() {\n    // Check platform is native or not (android/ios/web)\n    if (Capacitor.isNative) {\n      const browser = InAppBrowser.create(\n        environment.MOBILE_LOGIN_URL,\n        '_blank'\n      );\n      browser.on('loadstop').subscribe((event) => {\n        console.log(\"event.url\", event.url)\n        if (event.url != null && event.url.indexOf('Login/') > -1) {\n          const url = event.url;\n          let auth_token = url.substring(url.lastIndexOf('/') + 1);\n          if (auth_token !== '' && auth_token !== undefined) {\n            browser.close();\n            let token = Base64.decode(auth_token);\n            let data = token.split('|');\n            if (data[0] !== '' && data[0] !== undefined) {\n              setState((state) => ({\n                ...state,\n                loading: true\n              }));\n              const newUser = {\n                email: data[0],\n                password: data[1],\n                userAlreadyExists: data[2]\n              };\n              login(newUser);\n            }\n          }\n        }\n      });\n      browser.on('load');\n    } else {\n      // for web app\n      console.log(environment.ZOHO_LOGIN_REDIRECT_URI);\n      window.open(environment.ZOHO_LOGIN_REDIRECT_URI, '_self');\n    }\n  }\n\n  return (\n    <IonPage>\n      <IonContent>\n        <IonGrid style={{ height: '100%' }}>\n          <IonRow\n            style={{\n              height: '30%',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }}>\n            <img src={logo} alt=\"Logo\" style={{ width: '200px' }} />\n          </IonRow>\n          <IonRow\n            style={{\n              height: '70%'\n            }}>\n            <IonCol sizeLg=\"5\">\n              <LoginCard\n                isLoading={state.loading}\n                showSync={showSync}\n                isContactsSyncing={state.contactsSync}\n                isLeadsSyncing={state.leadsSync}\n                isMessagesSyncing={state.messagesSync}\n                onDoAuth={onDoAuth}\n              />\n            </IonCol>\n          </IonRow>\n        </IonGrid>\n      </IonContent>\n      <IonAlert\n        isOpen={!!state.msg}\n        onDidDismiss={() => {\n          setState((state) => ({\n            ...state,\n            msg: null,\n            loading: false\n          }));\n        }}\n        header={'Login Error'}\n        message={state.msg}\n        buttons={[\n          {\n            text: 'Ok',\n            handler: () => {\n              setState((state) => ({\n                ...state,\n                msg: null,\n                loading: false\n              }));\n            }\n          }\n        ]}\n      />\n    </IonPage>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error,\n  showSync: state.auth.showSync\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (data) => dispatch(login(data)),\n    clearErrors: () => dispatch(clearErrors()),\n    fetchAccessToken: () => dispatch(fetchAccessToken()),\n    newLogin: (data) => dispatch(newLogin(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n","import axios from 'axios';\n\nimport setBasePath from '../utils/setBasePath';\nimport setAuthToken from '../utils/setAuthToken';\n\nimport { LOGOUT_SUCCESS, FETCH_ACCESS_TOKEN, DISCONNECT_CALL } from './types';\n\n//Get acces token\nexport const fetchAccessToken = () => (dispatch) => {\n  setBasePath();\n  setAuthToken();\n\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // Request body\n  axios\n    .get('/api/access-token', config)\n    .then((res) => {\n      if (\n        res.data.status !== undefined &&\n        res.data.status === 'Token is Expired'\n      ) {\n        dispatch({\n          type: LOGOUT_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: FETCH_ACCESS_TOKEN,\n          payload: res.data\n        });\n      }\n    })\n    .catch(() => {\n      // dispatch(\n      //   returnErrors(err.response.data, err.response.status, 'FETCH_CHAT_FAIL')\n      // )\n    });\n};\n\n//Get acces token\nexport const disconnectCall = () => (dispatch) => {\n  dispatch({\n    type: DISCONNECT_CALL\n  });\n};\n"],"sourceRoot":""}